// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klaytn/klaytn/storage/database (interfaces: DBManager)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	params "github.com/klaytn/klaytn/params"
	rlp "github.com/klaytn/klaytn/rlp"
	database "github.com/klaytn/klaytn/storage/database"
	big "math/big"
	reflect "reflect"
)

// MockDBManager is a mock of DBManager interface
type MockDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerMockRecorder
}

// MockDBManagerMockRecorder is the mock recorder for MockDBManager
type MockDBManagerMockRecorder struct {
	mock *MockDBManager
}

// NewMockDBManager creates a new mock instance
func NewMockDBManager(ctrl *gomock.Controller) *MockDBManager {
	mock := &MockDBManager{ctrl: ctrl}
	mock.recorder = &MockDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBManager) EXPECT() *MockDBManagerMockRecorder {
	return m.recorder
}

// ClearBlockChainCache mocks base method
func (m *MockDBManager) ClearBlockChainCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearBlockChainCache")
}

// ClearBlockChainCache indicates an expected call of ClearBlockChainCache
func (mr *MockDBManagerMockRecorder) ClearBlockChainCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBlockChainCache", reflect.TypeOf((*MockDBManager)(nil).ClearBlockChainCache))
}

// ClearHeaderChainCache mocks base method
func (m *MockDBManager) ClearHeaderChainCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearHeaderChainCache")
}

// ClearHeaderChainCache indicates an expected call of ClearHeaderChainCache
func (mr *MockDBManagerMockRecorder) ClearHeaderChainCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearHeaderChainCache", reflect.TypeOf((*MockDBManager)(nil).ClearHeaderChainCache))
}

// Close mocks base method
func (m *MockDBManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBManager)(nil).Close))
}

// ConvertChildChainBlockHashToParentChainTxHash mocks base method
func (m *MockDBManager) ConvertChildChainBlockHashToParentChainTxHash(arg0 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertChildChainBlockHashToParentChainTxHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ConvertChildChainBlockHashToParentChainTxHash indicates an expected call of ConvertChildChainBlockHashToParentChainTxHash
func (mr *MockDBManagerMockRecorder) ConvertChildChainBlockHashToParentChainTxHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertChildChainBlockHashToParentChainTxHash", reflect.TypeOf((*MockDBManager)(nil).ConvertChildChainBlockHashToParentChainTxHash), arg0)
}

// CreateMigrationDBAndSetStatus mocks base method
func (m *MockDBManager) CreateMigrationDBAndSetStatus(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigrationDBAndSetStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMigrationDBAndSetStatus indicates an expected call of CreateMigrationDBAndSetStatus
func (mr *MockDBManagerMockRecorder) CreateMigrationDBAndSetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationDBAndSetStatus", reflect.TypeOf((*MockDBManager)(nil).CreateMigrationDBAndSetStatus), arg0)
}

// DeleteBlock mocks base method
func (m *MockDBManager) DeleteBlock(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBlock", arg0, arg1)
}

// DeleteBlock indicates an expected call of DeleteBlock
func (mr *MockDBManagerMockRecorder) DeleteBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockDBManager)(nil).DeleteBlock), arg0, arg1)
}

// DeleteBody mocks base method
func (m *MockDBManager) DeleteBody(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBody", arg0, arg1)
}

// DeleteBody indicates an expected call of DeleteBody
func (mr *MockDBManagerMockRecorder) DeleteBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBody", reflect.TypeOf((*MockDBManager)(nil).DeleteBody), arg0, arg1)
}

// DeleteCanonicalHash mocks base method
func (m *MockDBManager) DeleteCanonicalHash(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCanonicalHash", arg0)
}

// DeleteCanonicalHash indicates an expected call of DeleteCanonicalHash
func (mr *MockDBManagerMockRecorder) DeleteCanonicalHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCanonicalHash", reflect.TypeOf((*MockDBManager)(nil).DeleteCanonicalHash), arg0)
}

// DeleteHeader mocks base method
func (m *MockDBManager) DeleteHeader(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteHeader", arg0, arg1)
}

// DeleteHeader indicates an expected call of DeleteHeader
func (mr *MockDBManagerMockRecorder) DeleteHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeader", reflect.TypeOf((*MockDBManager)(nil).DeleteHeader), arg0, arg1)
}

// DeleteReceipts mocks base method
func (m *MockDBManager) DeleteReceipts(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteReceipts", arg0, arg1)
}

// DeleteReceipts indicates an expected call of DeleteReceipts
func (mr *MockDBManagerMockRecorder) DeleteReceipts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReceipts", reflect.TypeOf((*MockDBManager)(nil).DeleteReceipts), arg0, arg1)
}

// DeleteSectionHead mocks base method
func (m *MockDBManager) DeleteSectionHead(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSectionHead", arg0)
}

// DeleteSectionHead indicates an expected call of DeleteSectionHead
func (mr *MockDBManagerMockRecorder) DeleteSectionHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSectionHead", reflect.TypeOf((*MockDBManager)(nil).DeleteSectionHead), arg0)
}

// DeleteTd mocks base method
func (m *MockDBManager) DeleteTd(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTd", arg0, arg1)
}

// DeleteTd indicates an expected call of DeleteTd
func (mr *MockDBManagerMockRecorder) DeleteTd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTd", reflect.TypeOf((*MockDBManager)(nil).DeleteTd), arg0, arg1)
}

// DeleteTxLookupEntry mocks base method
func (m *MockDBManager) DeleteTxLookupEntry(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTxLookupEntry", arg0)
}

// DeleteTxLookupEntry indicates an expected call of DeleteTxLookupEntry
func (mr *MockDBManagerMockRecorder) DeleteTxLookupEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTxLookupEntry", reflect.TypeOf((*MockDBManager)(nil).DeleteTxLookupEntry), arg0)
}

// FindCommonAncestor mocks base method
func (m *MockDBManager) FindCommonAncestor(arg0, arg1 *types.Header) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommonAncestor", arg0, arg1)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// FindCommonAncestor indicates an expected call of FindCommonAncestor
func (mr *MockDBManagerMockRecorder) FindCommonAncestor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommonAncestor", reflect.TypeOf((*MockDBManager)(nil).FindCommonAncestor), arg0, arg1)
}

// FinishStateMigration mocks base method
func (m *MockDBManager) FinishStateMigration(arg0 bool) chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishStateMigration", arg0)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// FinishStateMigration indicates an expected call of FinishStateMigration
func (mr *MockDBManagerMockRecorder) FinishStateMigration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishStateMigration", reflect.TypeOf((*MockDBManager)(nil).FinishStateMigration), arg0)
}

// GetDBConfig mocks base method
func (m *MockDBManager) GetDBConfig() *database.DBConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBConfig")
	ret0, _ := ret[0].(*database.DBConfig)
	return ret0
}

// GetDBConfig indicates an expected call of GetDBConfig
func (mr *MockDBManagerMockRecorder) GetDBConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBConfig", reflect.TypeOf((*MockDBManager)(nil).GetDBConfig))
}

// GetLastIndexedBlockNumber mocks base method
func (m *MockDBManager) GetLastIndexedBlockNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastIndexedBlockNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastIndexedBlockNumber indicates an expected call of GetLastIndexedBlockNumber
func (mr *MockDBManagerMockRecorder) GetLastIndexedBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastIndexedBlockNumber", reflect.TypeOf((*MockDBManager)(nil).GetLastIndexedBlockNumber))
}

// GetMemDB mocks base method
func (m *MockDBManager) GetMemDB() *database.MemDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemDB")
	ret0, _ := ret[0].(*database.MemDB)
	return ret0
}

// GetMemDB indicates an expected call of GetMemDB
func (mr *MockDBManagerMockRecorder) GetMemDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemDB", reflect.TypeOf((*MockDBManager)(nil).GetMemDB))
}

// GetMiscDB mocks base method
func (m *MockDBManager) GetMiscDB() database.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMiscDB")
	ret0, _ := ret[0].(database.Database)
	return ret0
}

// GetMiscDB indicates an expected call of GetMiscDB
func (mr *MockDBManagerMockRecorder) GetMiscDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMiscDB", reflect.TypeOf((*MockDBManager)(nil).GetMiscDB))
}

// GetStateTrieDB mocks base method
func (m *MockDBManager) GetStateTrieDB() database.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateTrieDB")
	ret0, _ := ret[0].(database.Database)
	return ret0
}

// GetStateTrieDB indicates an expected call of GetStateTrieDB
func (mr *MockDBManagerMockRecorder) GetStateTrieDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateTrieDB", reflect.TypeOf((*MockDBManager)(nil).GetStateTrieDB))
}

// GetStateTrieMigrationDB mocks base method
func (m *MockDBManager) GetStateTrieMigrationDB() database.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateTrieMigrationDB")
	ret0, _ := ret[0].(database.Database)
	return ret0
}

// GetStateTrieMigrationDB indicates an expected call of GetStateTrieMigrationDB
func (mr *MockDBManagerMockRecorder) GetStateTrieMigrationDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateTrieMigrationDB", reflect.TypeOf((*MockDBManager)(nil).GetStateTrieMigrationDB))
}

// HasBlock mocks base method
func (m *MockDBManager) HasBlock(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlock indicates an expected call of HasBlock
func (mr *MockDBManagerMockRecorder) HasBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockDBManager)(nil).HasBlock), arg0, arg1)
}

// HasBody mocks base method
func (m *MockDBManager) HasBody(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBody", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBody indicates an expected call of HasBody
func (mr *MockDBManagerMockRecorder) HasBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBody", reflect.TypeOf((*MockDBManager)(nil).HasBody), arg0, arg1)
}

// HasHeader mocks base method
func (m *MockDBManager) HasHeader(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockDBManagerMockRecorder) HasHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockDBManager)(nil).HasHeader), arg0, arg1)
}

// HasStateTrieNode mocks base method
func (m *MockDBManager) HasStateTrieNode(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStateTrieNode", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasStateTrieNode indicates an expected call of HasStateTrieNode
func (mr *MockDBManagerMockRecorder) HasStateTrieNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStateTrieNode", reflect.TypeOf((*MockDBManager)(nil).HasStateTrieNode), arg0)
}

// HasStateTrieNodeFromNew mocks base method
func (m *MockDBManager) HasStateTrieNodeFromNew(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStateTrieNodeFromNew", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasStateTrieNodeFromNew indicates an expected call of HasStateTrieNodeFromNew
func (mr *MockDBManagerMockRecorder) HasStateTrieNodeFromNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStateTrieNodeFromNew", reflect.TypeOf((*MockDBManager)(nil).HasStateTrieNodeFromNew), arg0)
}

// HasStateTrieNodeFromOld mocks base method
func (m *MockDBManager) HasStateTrieNodeFromOld(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStateTrieNodeFromOld", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasStateTrieNodeFromOld indicates an expected call of HasStateTrieNodeFromOld
func (mr *MockDBManagerMockRecorder) HasStateTrieNodeFromOld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStateTrieNodeFromOld", reflect.TypeOf((*MockDBManager)(nil).HasStateTrieNodeFromOld), arg0)
}

// InMigration mocks base method
func (m *MockDBManager) InMigration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InMigration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InMigration indicates an expected call of InMigration
func (mr *MockDBManagerMockRecorder) InMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InMigration", reflect.TypeOf((*MockDBManager)(nil).InMigration))
}

// IsParallelDBWrite mocks base method
func (m *MockDBManager) IsParallelDBWrite() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParallelDBWrite")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsParallelDBWrite indicates an expected call of IsParallelDBWrite
func (mr *MockDBManagerMockRecorder) IsParallelDBWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParallelDBWrite", reflect.TypeOf((*MockDBManager)(nil).IsParallelDBWrite))
}

// IsSingle mocks base method
func (m *MockDBManager) IsSingle() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSingle")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSingle indicates an expected call of IsSingle
func (mr *MockDBManagerMockRecorder) IsSingle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSingle", reflect.TypeOf((*MockDBManager)(nil).IsSingle))
}

// MigrationBlockNumber mocks base method
func (m *MockDBManager) MigrationBlockNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationBlockNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MigrationBlockNumber indicates an expected call of MigrationBlockNumber
func (mr *MockDBManagerMockRecorder) MigrationBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationBlockNumber", reflect.TypeOf((*MockDBManager)(nil).MigrationBlockNumber))
}

// NewBatch mocks base method
func (m *MockDBManager) NewBatch(arg0 database.DBEntryType) database.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch", arg0)
	ret0, _ := ret[0].(database.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockDBManagerMockRecorder) NewBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockDBManager)(nil).NewBatch), arg0)
}

// NewSenderTxHashToTxHashBatch mocks base method
func (m *MockDBManager) NewSenderTxHashToTxHashBatch() database.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSenderTxHashToTxHashBatch")
	ret0, _ := ret[0].(database.Batch)
	return ret0
}

// NewSenderTxHashToTxHashBatch indicates an expected call of NewSenderTxHashToTxHashBatch
func (mr *MockDBManagerMockRecorder) NewSenderTxHashToTxHashBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSenderTxHashToTxHashBatch", reflect.TypeOf((*MockDBManager)(nil).NewSenderTxHashToTxHashBatch))
}

// PutBodyToBatch mocks base method
func (m *MockDBManager) PutBodyToBatch(arg0 database.Batch, arg1 common.Hash, arg2 uint64, arg3 *types.Body) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutBodyToBatch", arg0, arg1, arg2, arg3)
}

// PutBodyToBatch indicates an expected call of PutBodyToBatch
func (mr *MockDBManagerMockRecorder) PutBodyToBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBodyToBatch", reflect.TypeOf((*MockDBManager)(nil).PutBodyToBatch), arg0, arg1, arg2, arg3)
}

// PutReceiptsToBatch mocks base method
func (m *MockDBManager) PutReceiptsToBatch(arg0 database.Batch, arg1 common.Hash, arg2 uint64, arg3 types.Receipts) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutReceiptsToBatch", arg0, arg1, arg2, arg3)
}

// PutReceiptsToBatch indicates an expected call of PutReceiptsToBatch
func (mr *MockDBManagerMockRecorder) PutReceiptsToBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutReceiptsToBatch", reflect.TypeOf((*MockDBManager)(nil).PutReceiptsToBatch), arg0, arg1, arg2, arg3)
}

// PutSenderTxHashToTxHashToBatch mocks base method
func (m *MockDBManager) PutSenderTxHashToTxHashToBatch(arg0 database.Batch, arg1, arg2 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSenderTxHashToTxHashToBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSenderTxHashToTxHashToBatch indicates an expected call of PutSenderTxHashToTxHashToBatch
func (mr *MockDBManagerMockRecorder) PutSenderTxHashToTxHashToBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSenderTxHashToTxHashToBatch", reflect.TypeOf((*MockDBManager)(nil).PutSenderTxHashToTxHashToBatch), arg0, arg1, arg2)
}

// PutTxLookupEntriesToBatch mocks base method
func (m *MockDBManager) PutTxLookupEntriesToBatch(arg0 database.Batch, arg1 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutTxLookupEntriesToBatch", arg0, arg1)
}

// PutTxLookupEntriesToBatch indicates an expected call of PutTxLookupEntriesToBatch
func (mr *MockDBManagerMockRecorder) PutTxLookupEntriesToBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTxLookupEntriesToBatch", reflect.TypeOf((*MockDBManager)(nil).PutTxLookupEntriesToBatch), arg0, arg1)
}

// ReadAnchoredBlockNumber mocks base method
func (m *MockDBManager) ReadAnchoredBlockNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAnchoredBlockNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ReadAnchoredBlockNumber indicates an expected call of ReadAnchoredBlockNumber
func (mr *MockDBManagerMockRecorder) ReadAnchoredBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAnchoredBlockNumber", reflect.TypeOf((*MockDBManager)(nil).ReadAnchoredBlockNumber))
}

// ReadBlock mocks base method
func (m *MockDBManager) ReadBlock(arg0 common.Hash, arg1 uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlock", arg0, arg1)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// ReadBlock indicates an expected call of ReadBlock
func (mr *MockDBManagerMockRecorder) ReadBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlock", reflect.TypeOf((*MockDBManager)(nil).ReadBlock), arg0, arg1)
}

// ReadBlockByHash mocks base method
func (m *MockDBManager) ReadBlockByHash(arg0 common.Hash) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlockByHash", arg0)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// ReadBlockByHash indicates an expected call of ReadBlockByHash
func (mr *MockDBManagerMockRecorder) ReadBlockByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlockByHash", reflect.TypeOf((*MockDBManager)(nil).ReadBlockByHash), arg0)
}

// ReadBlockByNumber mocks base method
func (m *MockDBManager) ReadBlockByNumber(arg0 uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlockByNumber", arg0)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// ReadBlockByNumber indicates an expected call of ReadBlockByNumber
func (mr *MockDBManagerMockRecorder) ReadBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlockByNumber", reflect.TypeOf((*MockDBManager)(nil).ReadBlockByNumber), arg0)
}

// ReadBlockReceiptsInCache mocks base method
func (m *MockDBManager) ReadBlockReceiptsInCache(arg0 common.Hash) types.Receipts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlockReceiptsInCache", arg0)
	ret0, _ := ret[0].(types.Receipts)
	return ret0
}

// ReadBlockReceiptsInCache indicates an expected call of ReadBlockReceiptsInCache
func (mr *MockDBManagerMockRecorder) ReadBlockReceiptsInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlockReceiptsInCache", reflect.TypeOf((*MockDBManager)(nil).ReadBlockReceiptsInCache), arg0)
}

// ReadBloomBits mocks base method
func (m *MockDBManager) ReadBloomBits(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBloomBits", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBloomBits indicates an expected call of ReadBloomBits
func (mr *MockDBManagerMockRecorder) ReadBloomBits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBloomBits", reflect.TypeOf((*MockDBManager)(nil).ReadBloomBits), arg0)
}

// ReadBody mocks base method
func (m *MockDBManager) ReadBody(arg0 common.Hash, arg1 uint64) *types.Body {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBody", arg0, arg1)
	ret0, _ := ret[0].(*types.Body)
	return ret0
}

// ReadBody indicates an expected call of ReadBody
func (mr *MockDBManagerMockRecorder) ReadBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBody", reflect.TypeOf((*MockDBManager)(nil).ReadBody), arg0, arg1)
}

// ReadBodyInCache mocks base method
func (m *MockDBManager) ReadBodyInCache(arg0 common.Hash) *types.Body {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBodyInCache", arg0)
	ret0, _ := ret[0].(*types.Body)
	return ret0
}

// ReadBodyInCache indicates an expected call of ReadBodyInCache
func (mr *MockDBManagerMockRecorder) ReadBodyInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBodyInCache", reflect.TypeOf((*MockDBManager)(nil).ReadBodyInCache), arg0)
}

// ReadBodyRLP mocks base method
func (m *MockDBManager) ReadBodyRLP(arg0 common.Hash, arg1 uint64) rlp.RawValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBodyRLP", arg0, arg1)
	ret0, _ := ret[0].(rlp.RawValue)
	return ret0
}

// ReadBodyRLP indicates an expected call of ReadBodyRLP
func (mr *MockDBManagerMockRecorder) ReadBodyRLP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBodyRLP", reflect.TypeOf((*MockDBManager)(nil).ReadBodyRLP), arg0, arg1)
}

// ReadBodyRLPByHash mocks base method
func (m *MockDBManager) ReadBodyRLPByHash(arg0 common.Hash) rlp.RawValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBodyRLPByHash", arg0)
	ret0, _ := ret[0].(rlp.RawValue)
	return ret0
}

// ReadBodyRLPByHash indicates an expected call of ReadBodyRLPByHash
func (mr *MockDBManagerMockRecorder) ReadBodyRLPByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBodyRLPByHash", reflect.TypeOf((*MockDBManager)(nil).ReadBodyRLPByHash), arg0)
}

// ReadCachedTrieNode mocks base method
func (m *MockDBManager) ReadCachedTrieNode(arg0 common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNode indicates an expected call of ReadCachedTrieNode
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNode", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNode), arg0)
}

// ReadCachedTrieNodeFromNew mocks base method
func (m *MockDBManager) ReadCachedTrieNodeFromNew(arg0 common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNodeFromNew", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNodeFromNew indicates an expected call of ReadCachedTrieNodeFromNew
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNodeFromNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNodeFromNew", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNodeFromNew), arg0)
}

// ReadCachedTrieNodeFromOld mocks base method
func (m *MockDBManager) ReadCachedTrieNodeFromOld(arg0 common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNodeFromOld", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNodeFromOld indicates an expected call of ReadCachedTrieNodeFromOld
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNodeFromOld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNodeFromOld", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNodeFromOld), arg0)
}

// ReadCachedTrieNodePreimage mocks base method
func (m *MockDBManager) ReadCachedTrieNodePreimage(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNodePreimage", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNodePreimage indicates an expected call of ReadCachedTrieNodePreimage
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNodePreimage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNodePreimage", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNodePreimage), arg0)
}

// ReadCachedTrieNodePreimageFromNew mocks base method
func (m *MockDBManager) ReadCachedTrieNodePreimageFromNew(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNodePreimageFromNew", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNodePreimageFromNew indicates an expected call of ReadCachedTrieNodePreimageFromNew
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNodePreimageFromNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNodePreimageFromNew", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNodePreimageFromNew), arg0)
}

// ReadCachedTrieNodePreimageFromOld mocks base method
func (m *MockDBManager) ReadCachedTrieNodePreimageFromOld(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCachedTrieNodePreimageFromOld", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCachedTrieNodePreimageFromOld indicates an expected call of ReadCachedTrieNodePreimageFromOld
func (mr *MockDBManagerMockRecorder) ReadCachedTrieNodePreimageFromOld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCachedTrieNodePreimageFromOld", reflect.TypeOf((*MockDBManager)(nil).ReadCachedTrieNodePreimageFromOld), arg0)
}

// ReadCanonicalHash mocks base method
func (m *MockDBManager) ReadCanonicalHash(arg0 uint64) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCanonicalHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadCanonicalHash indicates an expected call of ReadCanonicalHash
func (mr *MockDBManagerMockRecorder) ReadCanonicalHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCanonicalHash", reflect.TypeOf((*MockDBManager)(nil).ReadCanonicalHash), arg0)
}

// ReadChainConfig mocks base method
func (m *MockDBManager) ReadChainConfig(arg0 common.Hash) *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChainConfig", arg0)
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// ReadChainConfig indicates an expected call of ReadChainConfig
func (mr *MockDBManagerMockRecorder) ReadChainConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChainConfig", reflect.TypeOf((*MockDBManager)(nil).ReadChainConfig), arg0)
}

// ReadChainDataFetcherCheckpoint mocks base method
func (m *MockDBManager) ReadChainDataFetcherCheckpoint() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChainDataFetcherCheckpoint")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadChainDataFetcherCheckpoint indicates an expected call of ReadChainDataFetcherCheckpoint
func (mr *MockDBManagerMockRecorder) ReadChainDataFetcherCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChainDataFetcherCheckpoint", reflect.TypeOf((*MockDBManager)(nil).ReadChainDataFetcherCheckpoint))
}

// ReadChildOperatorFeePayer mocks base method
func (m *MockDBManager) ReadChildOperatorFeePayer() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChildOperatorFeePayer")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// ReadChildOperatorFeePayer indicates an expected call of ReadChildOperatorFeePayer
func (mr *MockDBManagerMockRecorder) ReadChildOperatorFeePayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChildOperatorFeePayer", reflect.TypeOf((*MockDBManager)(nil).ReadChildOperatorFeePayer))
}

// ReadCliqueSnapshot mocks base method
func (m *MockDBManager) ReadCliqueSnapshot(arg0 common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCliqueSnapshot", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCliqueSnapshot indicates an expected call of ReadCliqueSnapshot
func (mr *MockDBManagerMockRecorder) ReadCliqueSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCliqueSnapshot", reflect.TypeOf((*MockDBManager)(nil).ReadCliqueSnapshot), arg0)
}

// ReadDatabaseVersion mocks base method
func (m *MockDBManager) ReadDatabaseVersion() *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDatabaseVersion")
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// ReadDatabaseVersion indicates an expected call of ReadDatabaseVersion
func (mr *MockDBManagerMockRecorder) ReadDatabaseVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDatabaseVersion", reflect.TypeOf((*MockDBManager)(nil).ReadDatabaseVersion))
}

// ReadFastTrieProgress mocks base method
func (m *MockDBManager) ReadFastTrieProgress() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFastTrieProgress")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ReadFastTrieProgress indicates an expected call of ReadFastTrieProgress
func (mr *MockDBManagerMockRecorder) ReadFastTrieProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFastTrieProgress", reflect.TypeOf((*MockDBManager)(nil).ReadFastTrieProgress))
}

// ReadGovernance mocks base method
func (m *MockDBManager) ReadGovernance(arg0 uint64) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGovernance", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGovernance indicates an expected call of ReadGovernance
func (mr *MockDBManagerMockRecorder) ReadGovernance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGovernance", reflect.TypeOf((*MockDBManager)(nil).ReadGovernance), arg0)
}

// ReadGovernanceAtNumber mocks base method
func (m *MockDBManager) ReadGovernanceAtNumber(arg0, arg1 uint64) (uint64, map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGovernanceAtNumber", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadGovernanceAtNumber indicates an expected call of ReadGovernanceAtNumber
func (mr *MockDBManagerMockRecorder) ReadGovernanceAtNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGovernanceAtNumber", reflect.TypeOf((*MockDBManager)(nil).ReadGovernanceAtNumber), arg0, arg1)
}

// ReadGovernanceState mocks base method
func (m *MockDBManager) ReadGovernanceState() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGovernanceState")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGovernanceState indicates an expected call of ReadGovernanceState
func (mr *MockDBManagerMockRecorder) ReadGovernanceState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGovernanceState", reflect.TypeOf((*MockDBManager)(nil).ReadGovernanceState))
}

// ReadHandleTxHashFromRequestTxHash mocks base method
func (m *MockDBManager) ReadHandleTxHashFromRequestTxHash(arg0 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHandleTxHashFromRequestTxHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadHandleTxHashFromRequestTxHash indicates an expected call of ReadHandleTxHashFromRequestTxHash
func (mr *MockDBManagerMockRecorder) ReadHandleTxHashFromRequestTxHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHandleTxHashFromRequestTxHash", reflect.TypeOf((*MockDBManager)(nil).ReadHandleTxHashFromRequestTxHash), arg0)
}

// ReadHeadBlockHash mocks base method
func (m *MockDBManager) ReadHeadBlockHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeadBlockHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadHeadBlockHash indicates an expected call of ReadHeadBlockHash
func (mr *MockDBManagerMockRecorder) ReadHeadBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeadBlockHash", reflect.TypeOf((*MockDBManager)(nil).ReadHeadBlockHash))
}

// ReadHeadFastBlockHash mocks base method
func (m *MockDBManager) ReadHeadFastBlockHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeadFastBlockHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadHeadFastBlockHash indicates an expected call of ReadHeadFastBlockHash
func (mr *MockDBManagerMockRecorder) ReadHeadFastBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeadFastBlockHash", reflect.TypeOf((*MockDBManager)(nil).ReadHeadFastBlockHash))
}

// ReadHeadHeaderHash mocks base method
func (m *MockDBManager) ReadHeadHeaderHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeadHeaderHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadHeadHeaderHash indicates an expected call of ReadHeadHeaderHash
func (mr *MockDBManagerMockRecorder) ReadHeadHeaderHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeadHeaderHash", reflect.TypeOf((*MockDBManager)(nil).ReadHeadHeaderHash))
}

// ReadHeader mocks base method
func (m *MockDBManager) ReadHeader(arg0 common.Hash, arg1 uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeader", arg0, arg1)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// ReadHeader indicates an expected call of ReadHeader
func (mr *MockDBManagerMockRecorder) ReadHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeader", reflect.TypeOf((*MockDBManager)(nil).ReadHeader), arg0, arg1)
}

// ReadHeaderNumber mocks base method
func (m *MockDBManager) ReadHeaderNumber(arg0 common.Hash) *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeaderNumber", arg0)
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// ReadHeaderNumber indicates an expected call of ReadHeaderNumber
func (mr *MockDBManagerMockRecorder) ReadHeaderNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeaderNumber", reflect.TypeOf((*MockDBManager)(nil).ReadHeaderNumber), arg0)
}

// ReadHeaderRLP mocks base method
func (m *MockDBManager) ReadHeaderRLP(arg0 common.Hash, arg1 uint64) rlp.RawValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHeaderRLP", arg0, arg1)
	ret0, _ := ret[0].(rlp.RawValue)
	return ret0
}

// ReadHeaderRLP indicates an expected call of ReadHeaderRLP
func (mr *MockDBManagerMockRecorder) ReadHeaderRLP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHeaderRLP", reflect.TypeOf((*MockDBManager)(nil).ReadHeaderRLP), arg0, arg1)
}

// ReadIstanbulSnapshot mocks base method
func (m *MockDBManager) ReadIstanbulSnapshot(arg0 common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIstanbulSnapshot", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIstanbulSnapshot indicates an expected call of ReadIstanbulSnapshot
func (mr *MockDBManagerMockRecorder) ReadIstanbulSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIstanbulSnapshot", reflect.TypeOf((*MockDBManager)(nil).ReadIstanbulSnapshot), arg0)
}

// ReadParentOperatorFeePayer mocks base method
func (m *MockDBManager) ReadParentOperatorFeePayer() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadParentOperatorFeePayer")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// ReadParentOperatorFeePayer indicates an expected call of ReadParentOperatorFeePayer
func (mr *MockDBManagerMockRecorder) ReadParentOperatorFeePayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadParentOperatorFeePayer", reflect.TypeOf((*MockDBManager)(nil).ReadParentOperatorFeePayer))
}

// ReadPreimage mocks base method
func (m *MockDBManager) ReadPreimage(arg0 common.Hash) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPreimage", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ReadPreimage indicates an expected call of ReadPreimage
func (mr *MockDBManagerMockRecorder) ReadPreimage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPreimage", reflect.TypeOf((*MockDBManager)(nil).ReadPreimage), arg0)
}

// ReadPreimageFromNew mocks base method
func (m *MockDBManager) ReadPreimageFromNew(arg0 common.Hash) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPreimageFromNew", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ReadPreimageFromNew indicates an expected call of ReadPreimageFromNew
func (mr *MockDBManagerMockRecorder) ReadPreimageFromNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPreimageFromNew", reflect.TypeOf((*MockDBManager)(nil).ReadPreimageFromNew), arg0)
}

// ReadPreimageFromOld mocks base method
func (m *MockDBManager) ReadPreimageFromOld(arg0 common.Hash) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPreimageFromOld", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ReadPreimageFromOld indicates an expected call of ReadPreimageFromOld
func (mr *MockDBManagerMockRecorder) ReadPreimageFromOld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPreimageFromOld", reflect.TypeOf((*MockDBManager)(nil).ReadPreimageFromOld), arg0)
}

// ReadReceipt mocks base method
func (m *MockDBManager) ReadReceipt(arg0 common.Hash) (*types.Receipt, common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReceipt", arg0)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// ReadReceipt indicates an expected call of ReadReceipt
func (mr *MockDBManagerMockRecorder) ReadReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReceipt", reflect.TypeOf((*MockDBManager)(nil).ReadReceipt), arg0)
}

// ReadReceiptFromParentChain mocks base method
func (m *MockDBManager) ReadReceiptFromParentChain(arg0 common.Hash) *types.Receipt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReceiptFromParentChain", arg0)
	ret0, _ := ret[0].(*types.Receipt)
	return ret0
}

// ReadReceiptFromParentChain indicates an expected call of ReadReceiptFromParentChain
func (mr *MockDBManagerMockRecorder) ReadReceiptFromParentChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReceiptFromParentChain", reflect.TypeOf((*MockDBManager)(nil).ReadReceiptFromParentChain), arg0)
}

// ReadReceipts mocks base method
func (m *MockDBManager) ReadReceipts(arg0 common.Hash, arg1 uint64) types.Receipts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReceipts", arg0, arg1)
	ret0, _ := ret[0].(types.Receipts)
	return ret0
}

// ReadReceipts indicates an expected call of ReadReceipts
func (mr *MockDBManagerMockRecorder) ReadReceipts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReceipts", reflect.TypeOf((*MockDBManager)(nil).ReadReceipts), arg0, arg1)
}

// ReadReceiptsByBlockHash mocks base method
func (m *MockDBManager) ReadReceiptsByBlockHash(arg0 common.Hash) types.Receipts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReceiptsByBlockHash", arg0)
	ret0, _ := ret[0].(types.Receipts)
	return ret0
}

// ReadReceiptsByBlockHash indicates an expected call of ReadReceiptsByBlockHash
func (mr *MockDBManagerMockRecorder) ReadReceiptsByBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReceiptsByBlockHash", reflect.TypeOf((*MockDBManager)(nil).ReadReceiptsByBlockHash), arg0)
}

// ReadRecentGovernanceIdx mocks base method
func (m *MockDBManager) ReadRecentGovernanceIdx(arg0 int) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRecentGovernanceIdx", arg0)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecentGovernanceIdx indicates an expected call of ReadRecentGovernanceIdx
func (mr *MockDBManagerMockRecorder) ReadRecentGovernanceIdx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecentGovernanceIdx", reflect.TypeOf((*MockDBManager)(nil).ReadRecentGovernanceIdx), arg0)
}

// ReadSectionHead mocks base method
func (m *MockDBManager) ReadSectionHead(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSectionHead", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSectionHead indicates an expected call of ReadSectionHead
func (mr *MockDBManagerMockRecorder) ReadSectionHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSectionHead", reflect.TypeOf((*MockDBManager)(nil).ReadSectionHead), arg0)
}

// ReadStakingInfo mocks base method
func (m *MockDBManager) ReadStakingInfo(arg0 uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStakingInfo", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStakingInfo indicates an expected call of ReadStakingInfo
func (mr *MockDBManagerMockRecorder) ReadStakingInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStakingInfo", reflect.TypeOf((*MockDBManager)(nil).ReadStakingInfo), arg0)
}

// ReadStateTrieNode mocks base method
func (m *MockDBManager) ReadStateTrieNode(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateTrieNode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateTrieNode indicates an expected call of ReadStateTrieNode
func (mr *MockDBManagerMockRecorder) ReadStateTrieNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateTrieNode", reflect.TypeOf((*MockDBManager)(nil).ReadStateTrieNode), arg0)
}

// ReadStateTrieNodeFromNew mocks base method
func (m *MockDBManager) ReadStateTrieNodeFromNew(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateTrieNodeFromNew", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateTrieNodeFromNew indicates an expected call of ReadStateTrieNodeFromNew
func (mr *MockDBManagerMockRecorder) ReadStateTrieNodeFromNew(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateTrieNodeFromNew", reflect.TypeOf((*MockDBManager)(nil).ReadStateTrieNodeFromNew), arg0)
}

// ReadStateTrieNodeFromOld mocks base method
func (m *MockDBManager) ReadStateTrieNodeFromOld(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateTrieNodeFromOld", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateTrieNodeFromOld indicates an expected call of ReadStateTrieNodeFromOld
func (mr *MockDBManagerMockRecorder) ReadStateTrieNodeFromOld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateTrieNodeFromOld", reflect.TypeOf((*MockDBManager)(nil).ReadStateTrieNodeFromOld), arg0)
}

// ReadTd mocks base method
func (m *MockDBManager) ReadTd(arg0 common.Hash, arg1 uint64) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTd", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// ReadTd indicates an expected call of ReadTd
func (mr *MockDBManagerMockRecorder) ReadTd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTd", reflect.TypeOf((*MockDBManager)(nil).ReadTd), arg0, arg1)
}

// ReadTxAndLookupInfo mocks base method
func (m *MockDBManager) ReadTxAndLookupInfo(arg0 common.Hash) (*types.Transaction, common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxAndLookupInfo", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// ReadTxAndLookupInfo indicates an expected call of ReadTxAndLookupInfo
func (mr *MockDBManagerMockRecorder) ReadTxAndLookupInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxAndLookupInfo", reflect.TypeOf((*MockDBManager)(nil).ReadTxAndLookupInfo), arg0)
}

// ReadTxAndLookupInfoInCache mocks base method
func (m *MockDBManager) ReadTxAndLookupInfoInCache(arg0 common.Hash) (*types.Transaction, common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxAndLookupInfoInCache", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// ReadTxAndLookupInfoInCache indicates an expected call of ReadTxAndLookupInfoInCache
func (mr *MockDBManagerMockRecorder) ReadTxAndLookupInfoInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxAndLookupInfoInCache", reflect.TypeOf((*MockDBManager)(nil).ReadTxAndLookupInfoInCache), arg0)
}

// ReadTxHashFromSenderTxHash mocks base method
func (m *MockDBManager) ReadTxHashFromSenderTxHash(arg0 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxHashFromSenderTxHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadTxHashFromSenderTxHash indicates an expected call of ReadTxHashFromSenderTxHash
func (mr *MockDBManagerMockRecorder) ReadTxHashFromSenderTxHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxHashFromSenderTxHash", reflect.TypeOf((*MockDBManager)(nil).ReadTxHashFromSenderTxHash), arg0)
}

// ReadTxLookupEntry mocks base method
func (m *MockDBManager) ReadTxLookupEntry(arg0 common.Hash) (common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxLookupEntry", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	return ret0, ret1, ret2
}

// ReadTxLookupEntry indicates an expected call of ReadTxLookupEntry
func (mr *MockDBManagerMockRecorder) ReadTxLookupEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxLookupEntry", reflect.TypeOf((*MockDBManager)(nil).ReadTxLookupEntry), arg0)
}

// ReadTxReceiptInCache mocks base method
func (m *MockDBManager) ReadTxReceiptInCache(arg0 common.Hash) *types.Receipt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxReceiptInCache", arg0)
	ret0, _ := ret[0].(*types.Receipt)
	return ret0
}

// ReadTxReceiptInCache indicates an expected call of ReadTxReceiptInCache
func (mr *MockDBManagerMockRecorder) ReadTxReceiptInCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxReceiptInCache", reflect.TypeOf((*MockDBManager)(nil).ReadTxReceiptInCache), arg0)
}

// ReadValidSections mocks base method
func (m *MockDBManager) ReadValidSections() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadValidSections")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadValidSections indicates an expected call of ReadValidSections
func (mr *MockDBManagerMockRecorder) ReadValidSections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadValidSections", reflect.TypeOf((*MockDBManager)(nil).ReadValidSections))
}

// StartDBMigration mocks base method
func (m *MockDBManager) StartDBMigration(arg0 database.DBManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBMigration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDBMigration indicates an expected call of StartDBMigration
func (mr *MockDBManagerMockRecorder) StartDBMigration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBMigration", reflect.TypeOf((*MockDBManager)(nil).StartDBMigration), arg0)
}

// WriteAnchoredBlockNumber mocks base method
func (m *MockDBManager) WriteAnchoredBlockNumber(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteAnchoredBlockNumber", arg0)
}

// WriteAnchoredBlockNumber indicates an expected call of WriteAnchoredBlockNumber
func (mr *MockDBManagerMockRecorder) WriteAnchoredBlockNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAnchoredBlockNumber", reflect.TypeOf((*MockDBManager)(nil).WriteAnchoredBlockNumber), arg0)
}

// WriteAndCacheTxLookupEntries mocks base method
func (m *MockDBManager) WriteAndCacheTxLookupEntries(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndCacheTxLookupEntries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAndCacheTxLookupEntries indicates an expected call of WriteAndCacheTxLookupEntries
func (mr *MockDBManagerMockRecorder) WriteAndCacheTxLookupEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCacheTxLookupEntries", reflect.TypeOf((*MockDBManager)(nil).WriteAndCacheTxLookupEntries), arg0)
}

// WriteBlock mocks base method
func (m *MockDBManager) WriteBlock(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteBlock", arg0)
}

// WriteBlock indicates an expected call of WriteBlock
func (mr *MockDBManagerMockRecorder) WriteBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlock", reflect.TypeOf((*MockDBManager)(nil).WriteBlock), arg0)
}

// WriteBloomBits mocks base method
func (m *MockDBManager) WriteBloomBits(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBloomBits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBloomBits indicates an expected call of WriteBloomBits
func (mr *MockDBManagerMockRecorder) WriteBloomBits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBloomBits", reflect.TypeOf((*MockDBManager)(nil).WriteBloomBits), arg0, arg1)
}

// WriteBody mocks base method
func (m *MockDBManager) WriteBody(arg0 common.Hash, arg1 uint64, arg2 *types.Body) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteBody", arg0, arg1, arg2)
}

// WriteBody indicates an expected call of WriteBody
func (mr *MockDBManagerMockRecorder) WriteBody(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBody", reflect.TypeOf((*MockDBManager)(nil).WriteBody), arg0, arg1, arg2)
}

// WriteBodyRLP mocks base method
func (m *MockDBManager) WriteBodyRLP(arg0 common.Hash, arg1 uint64, arg2 rlp.RawValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteBodyRLP", arg0, arg1, arg2)
}

// WriteBodyRLP indicates an expected call of WriteBodyRLP
func (mr *MockDBManagerMockRecorder) WriteBodyRLP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBodyRLP", reflect.TypeOf((*MockDBManager)(nil).WriteBodyRLP), arg0, arg1, arg2)
}

// WriteCanonicalHash mocks base method
func (m *MockDBManager) WriteCanonicalHash(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteCanonicalHash", arg0, arg1)
}

// WriteCanonicalHash indicates an expected call of WriteCanonicalHash
func (mr *MockDBManagerMockRecorder) WriteCanonicalHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCanonicalHash", reflect.TypeOf((*MockDBManager)(nil).WriteCanonicalHash), arg0, arg1)
}

// WriteChainConfig mocks base method
func (m *MockDBManager) WriteChainConfig(arg0 common.Hash, arg1 *params.ChainConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteChainConfig", arg0, arg1)
}

// WriteChainConfig indicates an expected call of WriteChainConfig
func (mr *MockDBManagerMockRecorder) WriteChainConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChainConfig", reflect.TypeOf((*MockDBManager)(nil).WriteChainConfig), arg0, arg1)
}

// WriteChainDataFetcherCheckpoint mocks base method
func (m *MockDBManager) WriteChainDataFetcherCheckpoint(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChainDataFetcherCheckpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteChainDataFetcherCheckpoint indicates an expected call of WriteChainDataFetcherCheckpoint
func (mr *MockDBManagerMockRecorder) WriteChainDataFetcherCheckpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChainDataFetcherCheckpoint", reflect.TypeOf((*MockDBManager)(nil).WriteChainDataFetcherCheckpoint), arg0)
}

// WriteChildChainTxHash mocks base method
func (m *MockDBManager) WriteChildChainTxHash(arg0, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteChildChainTxHash", arg0, arg1)
}

// WriteChildChainTxHash indicates an expected call of WriteChildChainTxHash
func (mr *MockDBManagerMockRecorder) WriteChildChainTxHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChildChainTxHash", reflect.TypeOf((*MockDBManager)(nil).WriteChildChainTxHash), arg0, arg1)
}

// WriteChildOperatorFeePayer mocks base method
func (m *MockDBManager) WriteChildOperatorFeePayer(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteChildOperatorFeePayer", arg0)
}

// WriteChildOperatorFeePayer indicates an expected call of WriteChildOperatorFeePayer
func (mr *MockDBManagerMockRecorder) WriteChildOperatorFeePayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChildOperatorFeePayer", reflect.TypeOf((*MockDBManager)(nil).WriteChildOperatorFeePayer), arg0)
}

// WriteCliqueSnapshot mocks base method
func (m *MockDBManager) WriteCliqueSnapshot(arg0 common.Hash, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCliqueSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCliqueSnapshot indicates an expected call of WriteCliqueSnapshot
func (mr *MockDBManagerMockRecorder) WriteCliqueSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCliqueSnapshot", reflect.TypeOf((*MockDBManager)(nil).WriteCliqueSnapshot), arg0, arg1)
}

// WriteDatabaseVersion mocks base method
func (m *MockDBManager) WriteDatabaseVersion(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteDatabaseVersion", arg0)
}

// WriteDatabaseVersion indicates an expected call of WriteDatabaseVersion
func (mr *MockDBManagerMockRecorder) WriteDatabaseVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDatabaseVersion", reflect.TypeOf((*MockDBManager)(nil).WriteDatabaseVersion), arg0)
}

// WriteFastTrieProgress mocks base method
func (m *MockDBManager) WriteFastTrieProgress(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteFastTrieProgress", arg0)
}

// WriteFastTrieProgress indicates an expected call of WriteFastTrieProgress
func (mr *MockDBManagerMockRecorder) WriteFastTrieProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFastTrieProgress", reflect.TypeOf((*MockDBManager)(nil).WriteFastTrieProgress), arg0)
}

// WriteGovernance mocks base method
func (m *MockDBManager) WriteGovernance(arg0 map[string]interface{}, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGovernance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGovernance indicates an expected call of WriteGovernance
func (mr *MockDBManagerMockRecorder) WriteGovernance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGovernance", reflect.TypeOf((*MockDBManager)(nil).WriteGovernance), arg0, arg1)
}

// WriteGovernanceIdx mocks base method
func (m *MockDBManager) WriteGovernanceIdx(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGovernanceIdx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGovernanceIdx indicates an expected call of WriteGovernanceIdx
func (mr *MockDBManagerMockRecorder) WriteGovernanceIdx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGovernanceIdx", reflect.TypeOf((*MockDBManager)(nil).WriteGovernanceIdx), arg0)
}

// WriteGovernanceState mocks base method
func (m *MockDBManager) WriteGovernanceState(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGovernanceState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGovernanceState indicates an expected call of WriteGovernanceState
func (mr *MockDBManagerMockRecorder) WriteGovernanceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGovernanceState", reflect.TypeOf((*MockDBManager)(nil).WriteGovernanceState), arg0)
}

// WriteHandleTxHashFromRequestTxHash mocks base method
func (m *MockDBManager) WriteHandleTxHashFromRequestTxHash(arg0, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHandleTxHashFromRequestTxHash", arg0, arg1)
}

// WriteHandleTxHashFromRequestTxHash indicates an expected call of WriteHandleTxHashFromRequestTxHash
func (mr *MockDBManagerMockRecorder) WriteHandleTxHashFromRequestTxHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHandleTxHashFromRequestTxHash", reflect.TypeOf((*MockDBManager)(nil).WriteHandleTxHashFromRequestTxHash), arg0, arg1)
}

// WriteHeadBlockHash mocks base method
func (m *MockDBManager) WriteHeadBlockHash(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeadBlockHash", arg0)
}

// WriteHeadBlockHash indicates an expected call of WriteHeadBlockHash
func (mr *MockDBManagerMockRecorder) WriteHeadBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeadBlockHash", reflect.TypeOf((*MockDBManager)(nil).WriteHeadBlockHash), arg0)
}

// WriteHeadFastBlockHash mocks base method
func (m *MockDBManager) WriteHeadFastBlockHash(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeadFastBlockHash", arg0)
}

// WriteHeadFastBlockHash indicates an expected call of WriteHeadFastBlockHash
func (mr *MockDBManagerMockRecorder) WriteHeadFastBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeadFastBlockHash", reflect.TypeOf((*MockDBManager)(nil).WriteHeadFastBlockHash), arg0)
}

// WriteHeadHeaderHash mocks base method
func (m *MockDBManager) WriteHeadHeaderHash(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeadHeaderHash", arg0)
}

// WriteHeadHeaderHash indicates an expected call of WriteHeadHeaderHash
func (mr *MockDBManagerMockRecorder) WriteHeadHeaderHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeadHeaderHash", reflect.TypeOf((*MockDBManager)(nil).WriteHeadHeaderHash), arg0)
}

// WriteHeader mocks base method
func (m *MockDBManager) WriteHeader(arg0 *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", arg0)
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockDBManagerMockRecorder) WriteHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockDBManager)(nil).WriteHeader), arg0)
}

// WriteIstanbulSnapshot mocks base method
func (m *MockDBManager) WriteIstanbulSnapshot(arg0 common.Hash, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteIstanbulSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteIstanbulSnapshot indicates an expected call of WriteIstanbulSnapshot
func (mr *MockDBManagerMockRecorder) WriteIstanbulSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteIstanbulSnapshot", reflect.TypeOf((*MockDBManager)(nil).WriteIstanbulSnapshot), arg0, arg1)
}

// WriteLastIndexedBlockNumber mocks base method
func (m *MockDBManager) WriteLastIndexedBlockNumber(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteLastIndexedBlockNumber", arg0)
}

// WriteLastIndexedBlockNumber indicates an expected call of WriteLastIndexedBlockNumber
func (mr *MockDBManagerMockRecorder) WriteLastIndexedBlockNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLastIndexedBlockNumber", reflect.TypeOf((*MockDBManager)(nil).WriteLastIndexedBlockNumber), arg0)
}

// WriteMerkleProof mocks base method
func (m *MockDBManager) WriteMerkleProof(arg0, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteMerkleProof", arg0, arg1)
}

// WriteMerkleProof indicates an expected call of WriteMerkleProof
func (mr *MockDBManagerMockRecorder) WriteMerkleProof(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMerkleProof", reflect.TypeOf((*MockDBManager)(nil).WriteMerkleProof), arg0, arg1)
}

// WriteParentOperatorFeePayer mocks base method
func (m *MockDBManager) WriteParentOperatorFeePayer(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteParentOperatorFeePayer", arg0)
}

// WriteParentOperatorFeePayer indicates an expected call of WriteParentOperatorFeePayer
func (mr *MockDBManagerMockRecorder) WriteParentOperatorFeePayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteParentOperatorFeePayer", reflect.TypeOf((*MockDBManager)(nil).WriteParentOperatorFeePayer), arg0)
}

// WritePreimages mocks base method
func (m *MockDBManager) WritePreimages(arg0 uint64, arg1 map[common.Hash][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WritePreimages", arg0, arg1)
}

// WritePreimages indicates an expected call of WritePreimages
func (mr *MockDBManagerMockRecorder) WritePreimages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePreimages", reflect.TypeOf((*MockDBManager)(nil).WritePreimages), arg0, arg1)
}

// WriteReceiptFromParentChain mocks base method
func (m *MockDBManager) WriteReceiptFromParentChain(arg0 common.Hash, arg1 *types.Receipt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteReceiptFromParentChain", arg0, arg1)
}

// WriteReceiptFromParentChain indicates an expected call of WriteReceiptFromParentChain
func (mr *MockDBManagerMockRecorder) WriteReceiptFromParentChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReceiptFromParentChain", reflect.TypeOf((*MockDBManager)(nil).WriteReceiptFromParentChain), arg0, arg1)
}

// WriteReceipts mocks base method
func (m *MockDBManager) WriteReceipts(arg0 common.Hash, arg1 uint64, arg2 types.Receipts) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteReceipts", arg0, arg1, arg2)
}

// WriteReceipts indicates an expected call of WriteReceipts
func (mr *MockDBManagerMockRecorder) WriteReceipts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReceipts", reflect.TypeOf((*MockDBManager)(nil).WriteReceipts), arg0, arg1, arg2)
}

// WriteSectionHead mocks base method
func (m *MockDBManager) WriteSectionHead(arg0 []byte, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteSectionHead", arg0, arg1)
}

// WriteSectionHead indicates an expected call of WriteSectionHead
func (mr *MockDBManagerMockRecorder) WriteSectionHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSectionHead", reflect.TypeOf((*MockDBManager)(nil).WriteSectionHead), arg0, arg1)
}

// WriteStakingInfo mocks base method
func (m *MockDBManager) WriteStakingInfo(arg0 uint64, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStakingInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStakingInfo indicates an expected call of WriteStakingInfo
func (mr *MockDBManagerMockRecorder) WriteStakingInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStakingInfo", reflect.TypeOf((*MockDBManager)(nil).WriteStakingInfo), arg0, arg1)
}

// WriteTd mocks base method
func (m *MockDBManager) WriteTd(arg0 common.Hash, arg1 uint64, arg2 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteTd", arg0, arg1, arg2)
}

// WriteTd indicates an expected call of WriteTd
func (mr *MockDBManagerMockRecorder) WriteTd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTd", reflect.TypeOf((*MockDBManager)(nil).WriteTd), arg0, arg1, arg2)
}

// WriteTxLookupEntries mocks base method
func (m *MockDBManager) WriteTxLookupEntries(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteTxLookupEntries", arg0)
}

// WriteTxLookupEntries indicates an expected call of WriteTxLookupEntries
func (mr *MockDBManagerMockRecorder) WriteTxLookupEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTxLookupEntries", reflect.TypeOf((*MockDBManager)(nil).WriteTxLookupEntries), arg0)
}

// WriteValidSections mocks base method
func (m *MockDBManager) WriteValidSections(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteValidSections", arg0)
}

// WriteValidSections indicates an expected call of WriteValidSections
func (mr *MockDBManagerMockRecorder) WriteValidSections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteValidSections", reflect.TypeOf((*MockDBManager)(nil).WriteValidSections), arg0)
}

// getDBDir mocks base method
func (m *MockDBManager) getDBDir(arg0 database.DBEntryType) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDBDir", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// getDBDir indicates an expected call of getDBDir
func (mr *MockDBManagerMockRecorder) getDBDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDBDir", reflect.TypeOf((*MockDBManager)(nil).getDBDir), arg0)
}

// getDatabase mocks base method
func (m *MockDBManager) getDatabase(arg0 database.DBEntryType) database.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDatabase", arg0)
	ret0, _ := ret[0].(database.Database)
	return ret0
}

// getDatabase indicates an expected call of getDatabase
func (mr *MockDBManagerMockRecorder) getDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDatabase", reflect.TypeOf((*MockDBManager)(nil).getDatabase), arg0)
}

// getStateTrieMigrationInfo mocks base method
func (m *MockDBManager) getStateTrieMigrationInfo() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStateTrieMigrationInfo")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// getStateTrieMigrationInfo indicates an expected call of getStateTrieMigrationInfo
func (mr *MockDBManagerMockRecorder) getStateTrieMigrationInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStateTrieMigrationInfo", reflect.TypeOf((*MockDBManager)(nil).getStateTrieMigrationInfo))
}

// setDBDir mocks base method
func (m *MockDBManager) setDBDir(arg0 database.DBEntryType, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setDBDir", arg0, arg1)
}

// setDBDir indicates an expected call of setDBDir
func (mr *MockDBManagerMockRecorder) setDBDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDBDir", reflect.TypeOf((*MockDBManager)(nil).setDBDir), arg0, arg1)
}

// setStateTrieMigrationStatus mocks base method
func (m *MockDBManager) setStateTrieMigrationStatus(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setStateTrieMigrationStatus", arg0)
}

// setStateTrieMigrationStatus indicates an expected call of setStateTrieMigrationStatus
func (mr *MockDBManagerMockRecorder) setStateTrieMigrationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStateTrieMigrationStatus", reflect.TypeOf((*MockDBManager)(nil).setStateTrieMigrationStatus), arg0)
}
